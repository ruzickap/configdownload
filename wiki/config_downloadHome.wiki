#summary One-sentence summary of this page.
#labels Featured

= Introduction to config_download.pl script =

config_download.pl is Perl script allowing downloading configs from various devices using standard protocols. It can run various commands on the devices and log their outputs. Currently ssh, cisco-telnet, ftp and http methods are supported.

The script is written in Perl and depends on few external modules:

  * Net-Telnet-Cisco -> Net::Telnet.
  * Net-SSH-Expect -> Expect -> IO::Pty
  * Net-FTP-Recursive
  * HTTP::Lite

Before you will run the script please ensure you have these modules installed in your system.

= Basic configuration =
The configuration is based on input XML file added as parameter to config_download.pl script.

Here is the description of XML input file:

The configuration XML file is splitted into few sections:

||{{{<cisco_telnet>...</cisco_telnet>}}} || for interacting with cisco devices accessed through telnet ||
||{{{<ssh>...</ssh>}}}||for ssh interacted devices||
||{{{<http_file_get>...</http_file_get>}}}||to get http configuration from device||
||{{{<ftp_recursive_get>...</ftp_recursive_get>}}}||to recursively transfer ftp directory from remote device||

Every section contains additional parameters like login names, passwords,
files etc.

Every section can contain `<commands_before>` and `<commands_after>` where can be written commands to be executed. These commands are executed in all hosts defined for the hosts and before/after commands specified in hosts sections.

== Cisco telnet interaction ==
Here is a example of XML section for Cisco:

{{{
<configuration>
  <cisco_telnet>
      <!-- Command executed before for all defines hosts before their own "command section" -->
      <commands_before>enable</commands_before>
      <!-- Command executed after for all defines hosts before their own "command section" -->
      <commands_after>show version</commands_after>
    <testbb0rt01 host="192.168.0.57" port="23" username="admin" password="12345" enable_password="123456" 
login_timeout="1" output_log="./testbb0rt01-192.168.0.57.log" login_prompt='(?m:^Please enter your selection:\s*$)'>
      <commands>show ip route 192.168.20.1</commands>
    </testbb0rt01>
    <testbb0rt02 host="192.168.0.58" port="23" username="admin" password="12345" enable_password="123456" 
login_timeout="1" output_log="./testbb0rt01-192.168.0.58.log" login_prompt='(?m:^Please enter your selection:\s*$)'>
      <commands timeout=2>x</commands>
      <commands>show ip route 192.168.20.1</commands>
    </testbb0rt02>
  </cisco_telnet>
</configuration>
}}}

You can see 2 hosts defined in this section: testbb0rt01, testbb0rt02. For
every host you can specify connection details, timeouts, log and prompt.

||login_timout||specifies how much time can take login procedure (default 15 seconds)||
||login_prompt||defines how should look prompt after successful login (by default it's cisco standard prompt)||
||prompt||how looks default prompt after executing the commands (by default it's cisco standard prompt)||
||output_log||defines output log where the whole interaction is stored (default it's hostname-ip.log)||

Every hostname (testbb0rt02) section can contain commands which will be executed and you can also specify timeout for them:
{{{<commands timeout=1>show ip route 192.168.20.1</commands>}}}

||timeout||specifies how long can command run before it goes back to "prompt". If command run longer than the "timeout value" you will get error.||


== SSH interaction ==

Example of SSH:

{{{
<configuration>
  <ssh>
    <commands_after>show run</commands_after>
    <switch04 host="192.168.0.56" port="22" username="admin" password="test" timeout="1" log_file="./switch04-192.168.0.52.log" ssh_options="-v" 
login_prompt='(?m:^\s*[\w.-]+\s?(?:\(config[^\)]*\))?\s?[\$#>]\s?(?:\(enable\))?\s*$)' 
password_prompt='[Pp]assword.*?:|[Pp]assphrase.*?:' prompt='(?m:^\s*[\w.-]+\s?(?:\(config[^\)]*\))?\s?[\$#>]\s?(?:\(enable\))?\s*$)'>
      <commands timeout="1" prompt='\s*[Pp]assword:\s*'>enable</commands>
      <commands>my_enable_password</commands>
      <commands>terminal length 0</commands>
      <commands>show version</commands>
  </ssh>
</configuration>
}}}

Like in previous example, you have to specify host, port, username and password. You can also set few parameters like timeout, log_file, ssh_options, login_prompot, password_prompt and prompt.

||timeout||default timeout for all commands, if the expected prompt is not there before timeout value you will get error||
||ssh_options||contain list of parameters used when script is calling ssh command (none by default)||
||login_prompt||shows how the login prompt should look like in regular expression after successful login (by default: {{{.*}}})||
||password_prompt||like login_promt set how password prompt looks like (by default: {{{[Pp]assword.*?:|[Pp]assphrase.*?:)}}}||
||prompt||is a default prompt used by device (by default: .*)||

Every command section can specify "timeout" and "prompt".

== HTTP file get ==

HTTP file get method can download defined file from HTTP server.
{{{
</configuration>
  <http_file_get>
    <tnmevm0mg02 host="192.168.244.51" port="80" get_file="/goform/gwcfg.ini" file="tnmevm0mg02-192.168.244.51.ini" />
    <tnmevm0mg01 host="192.168.244.50" get_file="/goform/gwcfg.ini" file="tnmevm0mg01-192.168.244.50.ini" />
  </http_file_get>
</configuration>
}}}

You can specify:

||host     || IP/hostname of the server||
||port     || service port (80 by default)||
||get_file || specify file which should be downloaded from the server||
||file     || destination file where the downloaded file should be stored||


== FTP recursive download ==

If you need to recursively download files/directories from the FTP server use
this method.
{{{
<configuration>
  <ftp_recursive_get>
    <test0sg02 host="192.168.0.49" username="siuftp" password="siuftp" remote_directory='.' local_directory='./test0sg02' />
    <tnmevm0sg01 host="192.168.0.48" username="siuftp" password="siuftp" local_directory='./test0sg01' />
  </ftp_recursive_get>
</configuration>
}}}

||host             || the ip/hostname of the FTP server||
||username         || login (default: anonymous)||
||password         || password (default: "")||
||remote_directory || remote directory on the FTP server (default: ".")||
||local_directory  || local directory where the data will be stored (default: ".") (the directory is created if not exists)||

= Author, version, license information =

License: GNU General Public License Version 3 (see LICENSE file)

Version: 0.1

Release date: June 2009

Platforms: All (Linux, NT, BSD, Solaris and other UNIX's, BeOS, OS/2...)

Author: Petr Ruzicka <petr.ruzicka@gmail.com>

Latest version: http://code.google.com/p/configdownload/